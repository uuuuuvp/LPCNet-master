/*This file is automatically generated from a Keras model*/

#ifndef RNN_DATA_H
#define RNN_DATA_H

#include "nnet.h"

/* This is an end-to-end model */
#define END2END

/* LPC weighting factor */
#define LPC_GAMMA 0.9f

/* Features look-ahead */
#define FEATURES_DELAY 1

#define GRU_A_EMBED_SIG_OUT_SIZE 1152
extern const EmbeddingLayer gru_a_embed_sig;

#define GRU_A_EMBED_PRED_OUT_SIZE 1152
extern const EmbeddingLayer gru_a_embed_pred;

#define GRU_A_EMBED_EXC_OUT_SIZE 1152
extern const EmbeddingLayer gru_a_embed_exc;

#define GRU_A_DENSE_FEATURE_OUT_SIZE 1152
extern const DenseLayer gru_a_dense_feature;

#define GRU_B_DENSE_FEATURE_OUT_SIZE 192
extern const DenseLayer gru_b_dense_feature;

extern const GRULayer gru_b;

#define EMBED_PITCH_OUT_SIZE 64
extern const EmbeddingLayer embed_pitch;

#define FEATURE_CONV1_OUT_SIZE 256
#define FEATURE_CONV1_STATE_SIZE (84*2)
#define FEATURE_CONV1_DELAY 1
extern const Conv1DLayer feature_conv1;

#define FEATURE_CONV2_OUT_SIZE 256
#define FEATURE_CONV2_STATE_SIZE (256*2)
#define FEATURE_CONV2_DELAY 1
extern const Conv1DLayer feature_conv2;

#define FEATURE_DENSE1_OUT_SIZE 256
extern const DenseLayer feature_dense1;

#define FEATURE_DENSE2_OUT_SIZE 256
extern const DenseLayer feature_dense2;

#define EMBED_SIG_OUT_SIZE 128
extern const EmbeddingLayer embed_sig;

#define GRU_A_OUT_SIZE 384
#define GRU_A_STATE_SIZE 384
#define GRU_B_OUT_SIZE 64
#define GRU_B_STATE_SIZE 64
#define DUAL_FC_OUT_SIZE 256
extern const MDenseLayer dual_fc;

#define SPARSE_GRU_A_OUT_SIZE 384
#define SPARSE_GRU_A_STATE_SIZE 384
extern const SparseGRULayer sparse_gru_a;

#define MAX_RNN_NEURONS 384

#define MAX_CONV_INPUTS 768

#define MAX_MDENSE_TMP 512

typedef struct {
  float feature_conv1_state[FEATURE_CONV1_STATE_SIZE];
  float feature_conv2_state[FEATURE_CONV2_STATE_SIZE];
  float gru_a_state[GRU_A_STATE_SIZE];
  float gru_b_state[GRU_B_STATE_SIZE];
} NNetState;


#endif
